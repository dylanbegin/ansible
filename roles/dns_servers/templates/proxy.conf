# -*- coding: utf-8 -*-
#  Copyright (c) 2021. Eric Draken (ericdraken.com)
#  Block YouTube ads on Apple devices by exploiting a Protobuf flaw
#
#  FreeBSD Prerequisites:
#  pkg install protobuf
#  pkg install py38-pip
#  pip install jsonpath-ng
#
# ref: https://ericdraken.com/pfsense-decrypt-ad-traffic/#note-5418-1
#
import hashlib
import inspect
import json
import re
import subprocess
import sys
import traceback
from datetime import datetime
from json import JSONDecodeError
from typing import Final
 
from google.protobuf.internal.encoder import TagBytes
from google.protobuf.text_format import WIRETYPE_LENGTH_DELIMITED
from jsonpath_ng import DatumInContext
from jsonpath_ng import jsonpath, parse
from jsonpath_ng.ext import parse
from mitmproxy import ctx, http
from mitmproxy.addons.next_layer import NextLayer
from mitmproxy.flow import Error
from mitmproxy.proxy import layer, layers
 
TRUNCATE_LEN: Final[int] = 120
DEBUG_MODE: bool = False
 
 
class Logger:
    """Helper to bypass the async logger loop to view logs in real-time"""
 
    def info(self, msg):
        print(msg) if DEBUG_MODE else ctx.log.info(msg)
 
    def warn(self, msg):
        print(msg) if DEBUG_MODE else ctx.log.warn(msg)
 
    def error(self, msg):
        print(msg) if DEBUG_MODE else ctx.log.error(msg)
 
    def alert(self, msg):
        print(msg) if DEBUG_MODE else ctx.log.alert(msg)
 
 
logger = Logger()
 
 
def trunc(msg) -> str:
    """Helper for viewing very long URLs"""
    msg = str(msg)
    if len(msg) > TRUNCATE_LEN:
        return f"{msg[:TRUNCATE_LEN-3]}..."
    else:
        return msg
 
 
class KilledError(Error):
    """Better logging messages than just 'Connection killed.'"""
 
    def __init__(self, reason: str) -> None:
        self._msg = Error.KILLED_MESSAGE
        self.reason = reason
        super().__init__(self._msg)
 
    @property
    def msg(self):
        caller = inspect.stack()[1].function
        # These are the only two methods that compare the msg
        # with KILLED_MESSAGE to perform business logic
        if "killable" in caller or "check_killed" in caller:
            return self._msg
        else:
            return self.reason
 
    # Needed to satisfy a flow setter
    @msg.setter
    def msg(self, msg):
        self._msg = msg
 
 
class JSONPathReplacement:
    """Helper class to organize JSON ad replacements"""
 
    def __init__(self, tag: str, target_path: str, replacement: any) -> None:
        self.tag: str = tag
        self.target_path = target_path
        self.target: jsonpath.Root = parse(target_path)
        self.replacement: any = replacement
 
    def update(self, obj: object):
        found = self.target.find(obj)
        if found:
            for index, item in enumerate(found):
                self.target.update(item, self.replacement)
                logger.warn(f"Replaced `{self.target_path}[{index}]` with `{self.replacement}`")
 
            if DEBUG_MODE:
                found_again = self.target.find(obj)
                replacement_json = json.dumps(self.replacement)
                for index, item_ in enumerate(found_again):
                    item: DatumInContext = item_
                    if json.dumps(item.value) != replacement_json:
                        logger.error(f"Replacement of `{self.target_path}` did not succeed. Found `{json.dumps(item.value)}`")
 
        else:
            logger.info(f"-Skipping `{self.target_path}`")
 
 
class ProtobufDebugParser:
    """Use the C++ protoc binary to parse raw Protobuf data. This is for debugging."""
 
    cmd = ["protoc", "--decode_raw"]
    url_re = re.compile(r"(https?://[^\s\\]+)", re.IGNORECASE)
 
    def format_response(self, data: bytes) -> list:
        protoc_proc = subprocess.Popen(self.cmd, shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = protoc_proc.communicate(data)
        if stderr:
            raise Exception(stderr)
 
        return stdout.splitlines(keepends=False)
 
    def parse_response(self, data: bytes) -> list:
        protoc_proc = subprocess.Popen(self.cmd, shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        grep_process = subprocess.Popen(["grep", "https://"], shell=False, stdin=protoc_proc.stdout, stdout=subprocess.PIPE)
 
        (_, stderr) = protoc_proc.communicate(data)
        (stdout, _) = grep_process.communicate()
 
        if stderr:
            raise Exception(stderr)
 
        urls = stdout.splitlines(keepends=False)
        matches = []
        for url in urls:
            match = self.url_re.search(url.decode())
            if match:
                matches.append(match.group(0))
        return matches
 
 
class YouTubeAdBlocker:
    """Intercept certain YouTube domains and modify the JSON or Protobuf to remove ads from YouTube"""
 
    # Set this to the blackhole IP used by pfBlockerNG, or even a partial blackhole IP
    blackhole_ip_prefix: Final[str] = "10.10.10."
 
    # Intercept only these wildcard domains and no others
    intercept_hosts = r"\.youtube\.com|google\.(com|ca)|googleapis\.com|googleadservices\.com|googlevideo\.com"
    intercept_hosts_re = re.compile(intercept_hosts, re.IGNORECASE)
 
    ad_url_search_string = b"/pagead/"
    ad_url_search_limit = 80_000
    target_field_tag = 50195462  # This is just one of several field tags
 
    protobuf_parser = ProtobufDebugParser()
 
    # Block requests from wildcard domains with any of the follow URL strings
    blocked_partials: dict = {
        "youtube.com": [
            "pagead/",
            "log_event?",
            "stats/ads",
            "stats/qoe?",
            "ptracking?",
            "generate_204",
            "error_204",
            "adformat=",
            "activeview?",
            "_ad_",
            "ai?",
            "sw.js",  # Just say no to service workers
        ],
        "google.com": ["pagead/"],
        "google.ca": ["pagead/"],
        "googleapis.com": ["pagead/"],
    }
 
    # Strip sections of JSON that contain ad information (for web YouTube)
    json_replacements = [
        JSONPathReplacement("yt_ad", "$.responseContext.serviceTrackingParams[*].params[?(@.key == 'yt_ad')].value", "0"),
        JSONPathReplacement("adPlacements", "$..adPlacements", []),
        JSONPathReplacement("adPlacementRenderer", "$..adPlacementRenderer", {}),
        JSONPathReplacement("adPlacementConfig", "$..adPlacementConfig", {}),
        JSONPathReplacement("adVideoId", "$..adVideoId", ""),
        JSONPathReplacement("playerAdParams", "$..playerAdParams", {}),
        JSONPathReplacement("showCompanion", "$..showCompanion", False),
        JSONPathReplacement("showInstream", "$..showInstream", False),
        JSONPathReplacement("useGut", "$..useGut", False),
        JSONPathReplacement("gutParams", "$..gutParams", {}),
    ]
 
    @staticmethod
    def in_allowed_ads_window():
        """Allow ads 5% of the time to support content creators which follows the CRTC rules for Student Radio.
        REF: https://crtc.gc.ca/eng/television/publicit/publicit.htm"""
        now = datetime.now()
        return 0 <= now.minute <= 2
 
    """The following methods are hooks that are called during the normal flow of MITMProxy"""
 
    # noinspection PyMethodMayBeStatic
    def load(self, _):
        # Do not allow piped requests we could miss
        ctx.options.http2 = False
        try:
            ctx.options.update(http2=False, anticomp=True, mode="transparent", termlog_verbosity="debug")
        except KeyError:
            ctx.options.update(http2=False, anticomp=True, mode="transparent")
        logger.warn(f"{self.__class__.__name__} loaded")
 
    def running(self):
        """Intercept requests only for YouTube domains"""
        if ctx.options.allow_hosts != [self.intercept_hosts]:
            ctx.options.allow_hosts = [self.intercept_hosts]
 
            ctx.options.ignore_hosts = []
            next_layer_addon: NextLayer = ctx.master.addons.get("NextLayer".lower())
            next_layer_addon.configure("allow_hosts")
            logger.warn(f"Updated interceptable YouTube hosts")
 
    def next_layer(self, nextlayer: layer.NextLayer):
        """Allow blocked domains that resolve the blackhole IP to pass through"""
        if nextlayer.context.server.address and nextlayer.context.server.address[0].startswith(self.blackhole_ip_prefix):
            nextlayer.layer = layers.TCPLayer(nextlayer.context, ignore=True)
 
    # noinspection PyMethodMayBeStatic
    def error(self, flow: http.HTTPFlow):
        """The TLS failed due to an ad-blocker info page with no verified TLS"""
        if flow.error and ("OpenSSL Error" in flow.error.msg and "alert internal error" in flow.error.msg):
            flow.kill()
 
    def request(self, flow: http.HTTPFlow) -> None:
        """Block ad URLs that pfBlockerNG and Pi-hole cannot detect"""
        # Skip inspecting certain requests
        if flow.response or flow.error or (flow.reply and flow.reply.state == "taken"):
            return
 
        # Occasionally skip blocking ads to support content creators
        if self.in_allowed_ads_window():
            return
 
        test_url: str = flow.request.url
        test_host: str = flow.request.pretty_host.lower()
        for host, partials in self.blocked_partials.items():
            if test_host.endswith(host):
                for partial in partials:
                    if partial in test_url.lower():
                        msg = f"âœ˜ [{host} -> {partial}] blocking {trunc(flow.request.pretty_url)}..."
                        logger.info(msg)
 
                        # Should be a connection refused error
                        flow.kill()
                        flow.error = KilledError(msg)
                        return
 
    def response(self, flow: http.HTTPFlow):
        """This is the main workhorse. Intercept JSON and Protobuf responses and modify them
        to remove or denature ad information"""
 
        # Skip inspecting certain responses
        if not flow.response or flow.error or not flow.response.headers:
            return
 
        logger.warn(f">> {flow.request}\n<< {flow.response}\n\n")
 
        # Occasionally skip blocking ads to support content creators
        if self.in_allowed_ads_window():
            return
 
        test_path: str = flow.request.url.lower()
        test_content_type: str = str(flow.response.headers.get("content-type")).lower()
 
        # Examine the Protobuf payload
        if "protobuf" in test_content_type:
            logger.warn(f"Intercepting {trunc(test_path)} Protobuf")
 
            try:
                # Capture rich Protobuf information to disk for offline analysis
                if DEBUG_MODE:
                    # TODO: This copying can be avoided, but this is debug mode, so we allow it
                    body = bytearray(flow.response.get_content(strict=False) or b"")
                    lines = self.protobuf_parser.format_response(body)
                    filename = "".join(x for x in test_path[:100] if (x.isalnum() or x in "._- "))
                    filename = f"protobuf-{filename}-{hashlib.md5(test_path.encode()).hexdigest()}"
                    with open(f"{filename}.formatted", mode="w", buffering=True) as f:
                        for line in lines:
                            f.write(f"{line}\n")
 
                    with open(f"{filename}.raw", mode="wb") as f:
                        f.write(flow.response.raw_content or b"")
 
                    with open(f"{filename}.decoded", mode="wb") as f:
                        f.write(body or b"")
 
                # TODO: Use a memory view or some more efficient search structure
                body: bytearray = bytearray(flow.response.get_content(strict=False) or b"")
 
                # Find a telltale ad URL, but limit the search
                distance = body[: self.ad_url_search_limit].find(self.ad_url_search_string)
                if distance < 0:
                    return
 
                logger.warn(f"Found {self.ad_url_search_string} at position {distance}")
 
                # Search forward for an ad URL signature, then backtrack to find the field tag
                tag_bytes = TagBytes(self.target_field_tag, WIRETYPE_LENGTH_DELIMITED)
                new_bytes = TagBytes(self.target_field_tag - 1, WIRETYPE_LENGTH_DELIMITED)
                target_pos = body[: distance - 1][::-1].find(tag_bytes[::-1])
                if target_pos > 0:
                    target_pos = distance - 1 - target_pos - len(tag_bytes)
                    logger.warn(f"Found {self.target_field_tag} at position {target_pos}")
                    assert body[target_pos] == tag_bytes[0]
                    assert body[target_pos + 1] == tag_bytes[1]
                    assert body[target_pos + 2] == tag_bytes[2]
                    for ind, b in enumerate(new_bytes):
                        body[target_pos + ind] = b
 
                """NOTE: There are other field keys in different sections, 
                and there may be multiple ad sections to denature. What preceded
                is a PoC of the technique that already blocks 90% of ads."""
 
                # Example Protobuf path:
                b"4 {"
                b"  49399797 {"  # Damage this key
                b"    1 {"
                b"       ... /pagead/"
 
                # Example Protobuf path
                b"        1 {"
                b"          50195462 {"  # Damage this key
                b"            1 {"
                b"              153515154 {"
                b"                 ... /pagead/"
 
                # Put the contents back in the response body
                flow.response.set_content(bytes(body))
 
            except Exception as e:
                _, _, exc_traceback = sys.exc_info()
                traceback_ = traceback.format_tb(exc_traceback)
                logger.alert(f"{e!r}, {traceback_}")
 
        elif "json" in test_content_type:
            logger.warn(f"Intercepting {trunc(test_path)} JSON")
 
            # Examine the JSON payload
            try:
                obj = flow.response.json()
                for replacement in self.json_replacements:
                    replacement.update(obj)
                flow.response.set_content(json.dumps(obj, ensure_ascii=False).encode())
            except (TypeError, JSONDecodeError):
                pass  # Do not stop the show
            except Exception as e:
                _, _, exc_traceback = sys.exc_info()
                traceback_ = traceback.format_tb(exc_traceback)
                logger.alert(f"{e!r}, {traceback_}")
 
 
# Register the addon
addons = [YouTubeAdBlocker()]
