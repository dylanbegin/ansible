# roles/swarm_servers/tasks/setup-masters.yml
# Setup keepalived and NFS for all Docker Swarm master nodes.

# Install dependencies
#- name: Keepalived | Deps | Install dependencies APK.
#  community.general.apk:
#    name: keepalived
#    state: latest
#    no_cache: true
#  when: ansible_distribution in ['Alpine']
#
#- name: Keepalived | Deps | Install dependencies APT.
#  ansible.builtin.apt:
#    name: keepalived
#    state: latest
#    update_cache: true
#  when: ansible_distribution in ['Debian', 'Ubuntu']
#
#- name: Keepalived | Deps | Install dependencies RPM.
#  ansible.builtin.dnf:
#    name: keepalived
#    state: latest
#    update_cache: true
#  when: ansible_distribution in ['Alma', 'CentOS', 'Fedora', 'Rocky']
#
#- name: Keepalived | Deps | Create application directories.
#  ansible.builtin.file:
#    path: /etc/keepalived
#    owner: root
#    group: root
#    mode: 0775
#    state: directory
#
# Generate vrrp password
#- name: Keepalived | Generate vrrp password.
#  ansible.builtin.shell:
#    cmd: head /dev/random | tr -dc A-Za-z0-9 | head -c 25 ; echo
#  register: vrrp_password
#  when: inventory_hostname in groups['masters'][0]
#
#- name: Keepalived | Generate master config.
#  ansible.builtin.template:
#    src: keepalived.conf.j2
#    dest: /etc/keepalived/keepalived.conf
#    owner: root
#    group: root
#    mode: 0640
#  vars:
#    vrrp_state: MASTER
#    vrrp_priority: 255
#  when: inventory_hostname in groups['masters'][0]
#  notify: restart-keepalived
#
#- name: Keepalived | Generate backup config.
#  ansible.builtin.template:
#    src: keepalived.conf.j2
#    dest: /etc/keepalived/keepalived.conf
#    owner: root
#    group: root
#    mode: 0640
#  vars:
#    vrrp_state: BACKUP
#    vrrp_priority: 254
#  when: inventory_hostname in groups['masters'][1]
#  notify: restart-keepalived

# Setup NFS client
- name: Common | NFS | Mount all shares.
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    dump: "{{ item.dump }}"
    passno: "{{ item.passno }}"
    boot: "{{ item.boot }}"
    state: "{{ item.state }}"
  with_items: "{{ swarm_nfs_mounts }}"

- name: Common | NFS | Remount shares APK.
  ansible.builtin.shell:
    cmd: mount -a
  when: ansible_distribution in ['Alpine']

- name: Common | NFS | Enable service APK.
  ansible.builtin.shell:
    cmd: rc-update add nfsmount
  when: ansible_distribution in ['Alpine']
